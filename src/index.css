@layer reset, tokens, general, specific, states, theme.light, theme.dark, overrides;

@import url("./styles/reset.css") layer(reset);
@import url("./styles/tokens.css") layer(tokens);
@import url("./styles/tokens-specific.css") layer(tokens);
@import url("./styles/defaults.css") layer(general);


@layer overrides {
  /* Visually hidden elements are visible to screen readers */
  .visually-hidden {
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .site-frame {
    width: var(--content-width);
    margin-inline: var(--marginCentering);
    padding-inline: var(--content__padding);
  }
}

/* Temp */
li {
  max-width: var(--optimalReadingWidth);
}

@media (prefers-color-scheme: light) {
  @layer theme.light {
    
    :root {
      --text-color: var(--colorPrimaryInverted);
      --background-color: var(--colorPrimary);
      --disabled-background-color: var(--colorDisabledDark);
      --disabled-text-color: var(--colorDisabledMedium);

      --correct-text-color: var(--colorSuccessDarkTheme);
      --correct-background-color: var(--background-color);
      --wrong-text-color: var(--colorErrorDarkTheme);
      --wrong-background-color: var(--background-color);
    }
  }
}

@media (prefers-color-scheme: dark) {
  @layer theme.dark {
    :root {
      --text-color: var(--colorPrimaryInverted);
      --background-color: var(--colorPrimary);
      --disabled-background-color: var(--colorDisabledDark);
      --disabled-text-color: var(--colorDisabledMedium);

      --correct-text-color: var(--colorSuccessDarkTheme);
      --correct-background-color: var(--background-color);
      --wrong-text-color: var(--colorErrorDarkTheme);
      --wrong-background-color: var(--background-color);

      /* new styles */
      --link__color: var(--text-color);
      --link__color_correct: var(--colorSuccessDarkTheme);
      --link__color_wrong: var(--colorErrorDarkTheme);
      --outline-color: var(--text-color);

      --header__background-color: var(--colorSuccessLightTheme);

      --aside__border-color: var(--text-color);
      --disclosure__color: var(--text-color);
    }
  }
}

@layer general {

  :root {
    --dev_headingFontSizeMin: calc(32 / 16 * 1rem);
    --dev_headingFontSizeIdeal: calc(1352 / 48 * 1vw);
    --dev_headingFontSizeMax: calc(48 / 16 * 1rem);
    --dev_headingFontSize: clamp(var(--dev_headingFontSizeMin), var(--dev_headingFontSizeIdeal), var(--dev_headingFontSizeMax));

    --dev_subheadingFontSizeMin: calc(20 / 16 * 1rem);
    --dev_subheadingFontSizeIdeal: calc(1352 / 24 * 1vw);
    --dev_subheadingFontSizeMax: calc(24 / 16 * 1rem);
    --dev_subheadingFontSize: clamp(var(--dev_subheadingFontSizeMin), var(--dev_subheadingFontSizeIdeal), var(--dev_subheadingFontSizeMax));

    --dev_textFontSizeMin: calc(18 / 16 * 1rem);
    --dev_textFontSizeIdeal: calc(1352 / 20 * 1vw);
    --dev_textFontSizeMax: calc(20 / 16 * 1rem);
    --dev_textFontSize: clamp(var(--dev_textFontSizeMin), var(--dev_textFontSizeIdeal), var(--dev_textFontSizeMax));
  }

    .root {
      position: var(--root-position);
    }

    body {
      background-color: var(--background-color);
      color: var(--text-color);
    
      font-family: var(--font-family_primary);
      font-size: var(--font-size_primary);
      font-weight: var(--font-weight_primary);
      letter-spacing: var(--text-letter-spacing);
      word-spacing: var(--text-word-spacing);
    }

    p {
      color: var(--text-color);
    }

    .layout {
      display: grid;
      /* One column */
      grid-template-columns: auto;
      /* All secondary areas are as high as the content, the main area takes the rest space */
      grid-template-rows: min-content min-content auto min-content;

      min-height: 100vh;
    }

    aside {
      /* Second line */
      grid-row: 2 / 3;
      /* Full width */
      grid-column: 1 / -1;

      padding-inline-end: var(--aside__padding-right_breakpoint);

      border-bottom: var(--aside__border-width) solid var(--aside__border-color);
    }

    @media screen and (min-width: calc(560 / 16 * 1rem)) {
      aside {
        padding-block-start: var(--aside__padding-top);
        padding-inline-end: var(--aside__padding-right);

        border-bottom: none;
        border-right: var(--aside__border-width) solid var(--aside__border-color);
      }
    }

    main {
      grid-row: 3 / 4;
      /* Full width */
      grid-column: 1 / -1;

      padding-inline-start: var(--main__padding-left_breakpoint);
    }

    @media screen and (min-width: calc(560 / 16 * 1rem)) {
      main {
        padding-block-start: var(--main__padding-top);
        padding-inline-start: var(--main__padding-left);
      }
    }

    footer {
      /* Last line */
      grid-row: 4 / 5;
      /* Full width */
      grid-column: 1 / -1;
    }

    @media screen and (min-width: 560px) {

      .layout {
        /* Sidebar has fixed width and the second column (main) takes the rest space */
        grid-template-columns: calc(280 / 16 * 1rem) 1fr;
        /* Header and footer are as high as their content and the main takes the rest space */
        grid-template-rows: auto minmax(80vh, auto) auto;
      }

      aside {
        /* Second line */
        grid-row: 2 / 3;
        /* First column */
        grid-column: 1 / 2;
      }
  
      main {
        /* Second line */
        grid-row: 2 / 3;
        /* Second column */
        grid-column: 2 / 3;
      }
  
      footer {
        /* Last line */
        grid-row: 3 / 4;
        /* Full-width */
        grid-column: 1 / -1;
      }
    }

   

    ol {
      padding-left: var(--ordered-list-left-gap);
    }

    h1, h2, h3 {
      font-size: inherit;
    }

    button {
      min-width: var(--button__min-width);
      min-height: var(--button__min-height);

      letter-spacing: var(--button__letter-spacing);
      word-spacing: var(--button__word-spacing);

      background-color: var(--background-color);
      border: var(--borderWidthPrimary) solid var(--text-color);
      color: var(--text-color);

      /* Animations */
      font-size: inherit;
      transition: var(--button-transition);
    }

    :is(button, a, p):focus-visible {
      outline: var(--link__outline-width) solid var(--outline-color);
      outline-offset: var(--outline__offset);
    }

    :is(button, a):hover {
      outline: var(--link__outline-width) solid var(--outline-color);
      outline-offset: var(--outline__offset);
    }

    button:hover, button:focus-visible {
      --text-color: var(--colorPrimary);
      --background-color: var(--colorPrimaryInverted);
    }
   
    /* Color white, maybe all standalone links will be the same in the end */
    .link {
      display: grid;
      align-content: center;

      height: var(--link__min-height);
      min-width: var(--link__min-width);

      color: var(--link__color);
      text-decoration: var(--link__underline_default);
    }

    .link:is(header .logo) {
      text-decoration: none;
    }

    /* overrides for correct link etc. */
    .link.correct {
      --link__color: var(--link__color_correct);
    }

    .link.wrong {
      --link__color: var(--link__color_wrong);
    }

    /* default activated */
     /* .link:hover, .link:focus-visible {
      outline: var(--link__outline-width) solid var(--link__color);
      outline-offset: var(--link__outline-offset);
    } */

    /* default current page */
    /* .link.active span {
      border-bottom: var(--link__border-width) solid var(--link__color);
    } */
    .link.active {
      text-decoration-style: var(--link__underline_active);
      text-underline-offset: var(--link__underline-offset);
    }

    /* override for logo */
    .link:is(header .logo):hover {
      text-decoration: underline;
      outline: none;
    }

    .link.active:is(header .logo) span {
      border-bottom: none;
    }
}

@layer specific {
  /* New approach, experiment */
  /* button.correct {
    --accent-color: var(--correct-text-color);
  }

  button.wrong {
    --accent-color: var(--wrong-text-color);
  }

  button.correct:not(button[role="tab"]) {
    background-color: var(--correct-background-color);
    color: var(--correct-text-color);
    border-color: var(--correct-text-color);
  }

  button.correct[role="tab"][aria-selected="true"] {
    border-color: var(--correct-text-color);
  }

  .card.wrong:is(div) {
    border-color: var(--wrong-text-color);
  }

  button.wrong:not(button[role="tab"]) {
    background-color: var(--wrong-background-color);
    color: var(--wrong-text-color);
    border-color: var(--wrong-text-color);
  }

  button.wrong[role="tab"][aria-selected="true"] {
    border-color: var(--wrong-text-color);
  }

  button.updated {
    animation-duration: var(--updated-tab-animation-duration);
    animation-name: updatedTab;
    animation-iteration-count: var(--updated-tab-repeats);
  } */

  @keyframes updatedTab {
    0% {
      color: var(--text-color);
    }  

    50% {
      /* color: var(--accent-color, var(--disabled-background-color)); */
      color: var(--disabled-background-color);
    }

    100% {
      color: var(--text-color);
    }
  } 

  #tabpanel-1 {
    border-color: var(--correct-text-color);
  }

  #tabpanel-2 {
    border-color: var(--wrong-text-color);
  }

  .card.correct:not(.card button) {
    border-color: var(--correct-text-color);
  }
}

@layer states {
  /* :focus-visible {
    outline: var(--outlineOnFocus) solid var(--background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--text-color);
  } */

  @media (prefers-reduced-motion: no-preference) {
    :focus-visible {
      /* Animations */
      transition: var(--focus-transition-scaling);
    }
  }

  /* button:focus-visible:not(.withIcon):not([role="tab"]) {
   background-color: var(--text-color);
   color: var(--background-color);
  } */

  /* button:focus-visible:not([role="tab"]) {
    background-color: var(--text-color);
    color: var(--background-color);
   } */

  /* button:focus-visible circle {
    stroke: var(--background-color);
  }

  button:focus-visible .plus rect:nth-of-type(2) {
    fill: var(--background-color);
  }

  button.correct:focus-visible:not([role="tab"]) {
    background-color: var(--correct-text-color);
    color: var(--correct-background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--correct-text-color);
  }

  button.wrong:focus-visible:not([role="tab"]) {
    background-color: var(--wrong-text-color);
    color: var(--wrong-background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--wrong-text-color);
  } */

   /* button[role="tab"]:is(:focus, :focus-visible) {
    box-shadow: var(--tab-shadow-on-focus);
    outline: var(--tab-outline-on-focus);
  }

  button[role="tab"].correct:focus {
    color: var(--correct-text-color);
  }

  button[role="tab"].wrong:focus {
    color: var(--wrong-text-color);
  }

  button[role="tab"]:focus > span {
    outline: var(--tab-inner-outline) solid var(--background-color);
    box-shadow: 0 0 0 var(--tab-inner-shadow) var(--text-color);
  }

  button[role="tab"].correct:focus > span {
    box-shadow: 0 0 0 var(--tab-inner-shadow) var(--correct-text-color);
  }

  button[role="tab"].wrong:focus > span {
    box-shadow: 0 0 0 var(--tab-inner-shadow) var(--wrong-text-color);
  } */

 
  
  :disabled {
    background-color: var(--disabled-background-color);

    color: var(--disabled-text-color);
    border-color: var(--disabled-text-color);
  }

  :disabled:hover {
    cursor: var(--disabled-cursor);
  }
}